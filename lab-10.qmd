---
project:
  author: "Bella Conrad"
  title: "Lab 10: Distances and the Border Zone"
  subtitle: 'Ecosystem Science and Sustainability 330'
  output-dir: docs
  type: website

format:
  html:
    self-contained: true
    
execute:
  echo: true
---

# Lab 10: Distances and the Border Zone

```{r}
remotes::install_github("ropensci/USAboundaries")
remotes::install_github("ropensci/USAboundariesData")
remotes::install_github("mikejohnson51/AOI")
remotes::install_github("ropenscilabs/rnaturalearthdata")

# spatial data science
library(tidyverse)
library(sf)
library(dplyr)
library(units)
library(flextable)

# Data
library(AOI)
library(USAboundaries)
library(USAboundariesData)
library(rnaturalearthdata)

# Visualization
library(gghighlight)
library(ggrepel)
library(ggplot2)
library(knitr)
```

## Question 1

```{r}
# 1.1 Define a Projection
eqdc <- '+proj=eqdc +lat_0=40 +lon_0=-96 +lat_1=20 +lat_2=60 +x_0=0 +y_0=0 +datum=NAD83 +units=m +no_defs'
eqcd <- st_crs(5070)
```

```{r}
# 1.3 Get country boundaries for Mexico, the US, and Canada
mx_us_can <- aoi_get(country = c("MX", "CA", "USA"))

df <- data.frame(name = state.name, 
                X = state.center$x, 
                Y = state.center$y)
```

```{r}
# 1.4 Get City locations from the CSV file
uscities <- read_csv("./data/simplemaps_uscities_basicv1.90(1)/uscities.csv")

cities_sf <- uscities %>% 
  st_as_sf(coords = c("lng", "lat"), crs = 4326, remove = FALSE) %>% 
  st_transform(5070) %>% 
  mutate

states <- us_states()
state_boundaries <- st_cast(states, "MULTILINESTRING") %>% 
  st_transform(5070)

cities_sf <- st_transform(cities_sf, 5070)
state_boundaries <- st_transform(state_boundaries, 5070)

cities_sf <- cities_sf %>%
  filter(!state_id %in% c("AK", "HI", "PR"))
```

```{r}
# GCS
df_sf_gcs <- st_as_sf(df,
                      coords = c("X", "Y"),
                      crs = 4269)
```

## Question 2

```{r}
# 2.1 Distance to USA Border
usa_border <- states %>% 
  st_union() %>% 
  st_cast("MULTILINESTRING")

cities_sf <- st_transform(cities_sf, 5070)
usa_border <- st_transform(usa_border, 5070)

state_boundaries_lines <- st_cast(state_boundaries, "MULTILINESTRING")
distance_matrix <- st_distance(cities_sf, state_boundaries_lines)
min_distances <- apply(distance_matrix, 1, min)

cities_distance <- cities_sf %>% 
  mutate(
    dist_to_border_m = as.numeric(st_distance(geometry, usa_border, by_element = FALSE)),
    dist_to_border_km = round(dist_to_border_m / 1000, 1)
  )

farthest_cities_border <- cities_distance %>% 
  arrange(desc(dist_to_border_km)) %>% 
  slice_head(n = 5) %>% 
  select(city, state_name = state_id, distance_km = dist_to_border_km)

farthest_cities_border %>% 
  flextable() %>% 
  set_header_labels(
    city = "City",
    state_name = "State",
    distance_km = "Distance to USA Border (km)"
  ) %>% 
  autofit()
```

```{r}
# 2.2 Distance to States
states_proj <- st_transform(states, 5070)
states_combined <- st_combine(states_proj)
cities <- st_cast(states_combined, "MULTILINESTRING")

state_boundaries_preserved <- states_proj %>% 
  st_combine() %>% 
  st_cast("MULTILINESTRING")

cities_sf <- st_transform(cities_sf, 5070)
state_boundaries_lines <- st_transform(state_boundaries_lines, 5070)

distance_matrix <- st_distance(cities_sf, state_boundaries_lines)

min_distances <- apply(distance_matrix, 1, min)

cities_distance <- cities_sf %>%
  mutate(
    dist_to_state_border_m = as.numeric(min_distances),
    dist_to_state_border_km = round(dist_to_state_border_m / 1000, 1)  
  )

top5_farthest <- cities_distance %>% 
  arrange(desc(dist_to_state_border_km)) %>% 
  slice_head(n = 5) %>% 
  select(city, state_id, dist_to_state_border_km)

flextable(top5_farthest) %>% 
  set_header_labels(
    city = "City",
    state_id = "State",
    dist_to_state_border_km = "Distance to State Border(km)"
  ) %>% 
  autofit()
```

```{r}
# 2.3 Distance to Mexico (km)
mexico <- mx_us_can %>% 
  filter(admin == "Mexico") %>% 
  st_transform(5070)

mexico_border <- mexico %>% 
  st_cast("MULTILINESTRING")

dist_to_mexico <- st_distance(cities_sf, mexico_border)
min_dist_mexico <- apply(dist_to_mexico, 1, min)

cities_distance <- cities_sf %>% 
  mutate(dist_to_mexico_m = as.numeric(min_dist_mexico),
         dist_to_mexico_km = round(dist_to_mexico_m / 1000, 1))

farthest_mexico <- cities_distance %>% 
  arrange(desc(dist_to_mexico_km)) %>% 
  slice_head(n = 5) %>% 
  select(city, state_name = state_id, distance_km = dist_to_mexico_km)

flextable(farthest_mexico) %>% 
  set_header_labels(
    city = "City",
    state_name = "State",
    distance_km = "Distance to Mexican Border (km)"
  ) %>% 
  autofit()
```

```{r}
# 2.4 Distance to Canada (km)
canada <- mx_us_can %>% 
  filter(admin == "Canada") %>% 
  st_transform(5070)

canada_border <- st_cast(canada, "MULTILINESTRING")

dist_matrix_canada <- st_distance(cities_sf, canada_border)
min_distances_canada <- apply(dist_matrix_canada, 1, min)
cities_distance <- cities_sf %>% 
  mutate(
    dist_to_canada_m = as.numeric(min_distances_canada),
    dist_to_canada_km = round(dist_to_canada_m / 1000, 1)
  )

farthest_canada <- cities_distance %>% 
  arrange(desc(dist_to_canada_km)) %>% 
  slice_head(n = 5) %>% 
  select(city, state_name = state_id, distance_km = dist_to_canada_km)

flextable(farthest_canada) %>% 
  set_header_labels(
    city = "City",
    state_name = "State",
    distance_km = "DIstance to Canadian Border (km)"
  ) %>% 
  autofit()
```

## Question 3

```{r}
# 3.1 Data
world <- rnaturalearth::ne_countries(scale = "medium", returnclass = "sf") 
continents <- world %>% 
  filter(continent %in% c("North America", "South America", "Europe")) 

states <- USAboundaries::us_states()
conus_states <- states %>% 
  filter(!state_abbr %in% c("AK", "HI", "PR"))

conus_outline <- st_union(conus_states)

top10_cities <- cities_sf %>% 
  arrange(desc(population)) %>% 
  slice_head(n = 10)

ggplot() +
  geom_sf(data = continents, fill = "lightgrey", color = "black", lty = "solid", size = 0.2) +
  geom_sf(data = conus_states, fill = "lightpink", color = "black", lty = "solid", size = 0.3) +
  geom_label_repel(
    data = top10_cities,
    aes(label = city, geometry = geometry),
    stat = "sf_coordinates",
    min.segment.length = 0,
    size = 3,
    box.padding = 0.3,
    point.padding = 0.2
  ) +
  coord_sf(xlim = c(-130, -60), ylim = c(20, 60), expand = FALSE) +
  theme_void() +
  labs(
    title = "Top 10 Largest Cities (by population) in the Continental US",
    caption = "Data Sources: Natural Earth, USAboundaries, uscities.csv"
  )
```


